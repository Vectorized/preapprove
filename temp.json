Optimized IR:
/// @use-src 0:"temp.sol"
object "EnumerableMap_1731" {
    code {
        /// @src 0:14531:30332  "library EnumerableMap {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("EnumerableMap_1731_deployed"), datasize("EnumerableMap_1731_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("EnumerableMap_1731_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_EnumerableMap_1731()
        { }
    }
    /// @use-src 0:"temp.sol"
    object "EnumerableMap_1731_deployed" {
        code {
            /// @src 0:14531:30332  "library EnumerableMap {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122075d3ec2b7341453704912887500cb84cba0cb651f37af0e93b3dd0eade9e65ef64736f6c637829302e382e31382d646576656c6f702e323032322e31312e32392b636f6d6d69742e3730373061313732005a"
    }
}

Optimized IR:
/// @use-src 0:"temp.sol"
object "EnumerableSet_612" {
    code {
        /// @src 0:1539:13169  "library EnumerableSet {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("EnumerableSet_612_deployed"), datasize("EnumerableSet_612_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("EnumerableSet_612_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_EnumerableSet_612()
        { }
    }
    /// @use-src 0:"temp.sol"
    object "EnumerableSet_612_deployed" {
        code {
            /// @src 0:1539:13169  "library EnumerableSet {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220445f60a0f6d3b03b909f0163b5655d046b979129f51f002973446830e07b78bd64736f6c637829302e382e31382d646576656c6f702e323032322e31312e32392b636f6d6d69742e3730373061313732005a"
    }
}

Optimized IR:
/// @use-src 0:"temp.sol"
object "PreApproveRegistry_2096" {
    code {
        /// @src 0:30883:40043  "contract PreApproveRegistry {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        constructor_PreApproveRegistry_2096()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("PreApproveRegistry_2096_deployed"), datasize("PreApproveRegistry_2096_deployed"))
        return(_1, datasize("PreApproveRegistry_2096_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_PreApproveRegistry_2096()
        { }
    }
    /// @use-src 0:"temp.sol"
    object "PreApproveRegistry_2096_deployed" {
        code {
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            mstore(64, 128)
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x1085efc7 {
                    external_fun_operatorAt_2018()
                }
                case 0x13e7c9d8 { external_fun_operators_1977() }
                case 0x41a7726a { external_fun_subscribe_1805() }
                case 0x4cb298cd {
                    external_fun_hasSubscription_1898()
                }
                case 0x4e2381e1 { external_fun_startTime_2051() }
                case 0x4eb22bf6 {
                    external_fun_START_DELAY_1742()
                }
                case 0x555dc0d9 {
                    external_fun_isPreApproved_2095()
                }
                case 0x5f715b8e {
                    external_fun_subscriptionAt_1953()
                }
                case 0x6303710d {
                    external_fun_totalOperators_1994()
                }
                case 0x653548bf {
                    external_fun_totalSubscriptions_1933()
                }
                case 0x7262561c {
                    external_fun_unsubscribe_1826()
                }
                case 0x9870d7fe {
                    external_fun_addOperator_1857()
                }
                case 0xac8a584a {
                    external_fun_removeOperator_1878()
                }
                case 0xf046395a {
                    external_fun_subscriptions_1916()
                }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            function external_fun_operatorAt_2018()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0, ret_1 := fun_operatorAt_2018(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(memPos, ret_0, ret_1)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data
            {
                data := ptr
                data := add(ptr, 0x20)
            }
            function abi_encode_t_address_to_t_address(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos
            {
                abi_encode_t_address_to_t_address(value0, pos)
                updatedPos := add(pos, 0x20)
            }
            function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next
            { next := add(ptr, 0x20) }
            function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)
                let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)
                let srcPtr := baseRef
                for { let i := 0 } lt(i, length) { i := add(i, 1) }
                {
                    let elementValue0 := mload(srcPtr)
                    pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)
                    srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)
                }
                end := pos
            }
            function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_operators_1977()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := fun_operators_1977(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_subscribe_1805()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_subscribe_1805(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bool(value))
            }
            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
            }
            function external_fun_hasSubscription_1898()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := fun_hasSubscription_1898(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_startTime_2051()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := fun_startTime_2051(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function cleanup_t_rational_604800_by_1(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_604800_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_604800_by_1(value)))
            }
            /// @src 0:31260:31307  "uint256 public constant START_DELAY = 86400 * 7"
            function constant_START_DELAY_1742() -> ret
            {
                /// @src 0:31298:31307  "86400 * 7"
                let expr_1741 := 0x093a80
                let _1 := convert_t_rational_604800_by_1_to_t_uint256(expr_1741)
                ret := _1
            }
            /// @ast-id 1742 @src 0:31260:31307  "uint256 public constant START_DELAY = 86400 * 7"
            function getter_fun_START_DELAY_1742() -> ret_0
            {
                ret_0 := constant_START_DELAY_1742()
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function external_fun_START_DELAY_1742()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_START_DELAY_1742()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_addresst_address(headStart, dataEnd) -> value0, value1, value2
            {
                if slt(sub(dataEnd, headStart), 96)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_isPreApproved_2095()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2 := abi_decode_tuple_t_addresst_addresst_address(4, calldatasize())
                let ret_0 := fun_isPreApproved_2095(param_0, param_1, param_2)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_subscriptionAt_1953()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0 := fun_subscriptionAt_1953(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_totalOperators_1994()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := fun_totalOperators_1994(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_totalSubscriptions_1933()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := fun_totalSubscriptions_1933(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_unsubscribe_1826()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_unsubscribe_1826(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_addOperator_1857()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_addOperator_1857(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_removeOperator_1878()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_removeOperator_1878(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_subscriptions_1916()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := fun_subscriptions_1916(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1805 @src 0:34047:34189  "function subscribe(address lister) public {..."
            function fun_subscribe_1805(var_lister_1787)
            {
                /// @src 0:34099:34113  "_subscriptions"
                let _2_slot := 0x01
                let expr_1790_slot := _2_slot
                /// @src 0:34114:34124  "msg.sender"
                let expr_1792 := caller()
                /// @src 0:34099:34125  "_subscriptions[msg.sender]"
                let _3 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1790_slot, expr_1792)
                let _4_slot := _3
                let expr_1793_slot := _4_slot
                /// @src 0:34099:34129  "_subscriptions[msg.sender].add"
                let expr_1794_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1793_slot)
                /// @src 0:34130:34136  "lister"
                let _5 := var_lister_1787
                let expr_1795 := _5
                /// @src 0:34099:34137  "_subscriptions[msg.sender].add(lister)"
                let expr_1796 := fun_add_352(expr_1794_self_slot, expr_1795)
                /// @src 0:34163:34173  "msg.sender"
                let expr_1800 := caller()
                /// @src 0:34175:34181  "lister"
                let _6 := var_lister_1787
                let expr_1801 := _6
                /// @src 0:34152:34182  "Subscribed(msg.sender, lister)"
                let _7 := 0x5af76814d21ef4a656d75bdbdb9cc3efa85af5efca9dbca0397824217d9344b7
                let _8 := convert_t_address_to_t_address(expr_1800)
                let _9 := convert_t_address_to_t_address(expr_1801)
                {
                    let _10 := allocate_unbounded()
                    let _11 := abi_encode_tuple__to__fromStack(_10)
                    log3(_10, sub(_11, _10), _7, _8, _9)
                }
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            function convert_t_address_to_t_uint160(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_uint160_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint160(value)))
            }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function convert_t_uint256_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(shift_left_0(cleanup_t_uint256(value)))
            }
            function convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(value) -> converted
            { converted := value }
            /// @ast-id 352 @src 0:8515:8665  "function add(AddressSet storage set, address value) internal returns (bool) {..."
            function fun_add_352(var_set_329_slot, var_value_331) -> var__334
            {
                /// @src 0:8585:8589  "bool"
                let zero_t_bool_12 := zero_value_for_split_t_bool()
                var__334 := zero_t_bool_12
                /// @src 0:8613:8616  "set"
                let _13_slot := var_set_329_slot
                let expr_337_slot := _13_slot
                /// @src 0:8613:8623  "set._inner"
                let _14 := add(expr_337_slot, 0)
                let _15_slot := _14
                let expr_338_slot := _15_slot
                /// @src 0:8649:8654  "value"
                let _16 := var_value_331
                let expr_345 := _16
                /// @src 0:8641:8655  "uint160(value)"
                let expr_346 := convert_t_address_to_t_uint160(expr_345)
                /// @src 0:8633:8656  "uint256(uint160(value))"
                let expr_347 := convert_t_uint160_to_t_uint256(expr_346)
                /// @src 0:8625:8657  "bytes32(uint256(uint160(value)))"
                let expr_348 := convert_t_uint256_to_t_bytes32(expr_347)
                /// @src 0:8608:8658  "_add(set._inner, bytes32(uint256(uint160(value))))"
                let _17_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_338_slot)
                let expr_349 := fun__add_52(_17_slot, expr_348)
                /// @src 0:8601:8658  "return _add(set._inner, bytes32(uint256(uint160(value))))"
                var__334 := expr_349
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function convert_array_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_storage_ptr(value) -> converted
            { converted := value }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function array_dataslot_t_array$_t_bytes32_$dyn_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function array_length_t_array$_t_bytes32_$dyn_storage_ptr(value) -> length
            { length := sload(value) }
            function array_dataslot_t_bytes_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function long_byte_array_index_access_no_checks(array, index) -> slot, offset
            {
                offset := sub(31, mod(index, 0x20))
                let dataArea := array_dataslot_t_bytes_storage_ptr(array)
                slot := add(dataArea, div(index, 0x20))
            }
            function storage_array_index_access_t_array$_t_bytes32_$dyn_storage_ptr(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_bytes32_$dyn_storage_ptr(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_bytes32_$dyn_storage_ptr(array)
                slot := add(dataArea, mul(index, 1))
                offset := 0
            }
            function shift_left_dynamic(bits, value) -> newValue
            { newValue := shl(bits, value) }
            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result
            {
                let shiftBits := mul(shiftBytes, 8)
                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
                toInsert := shift_left_dynamic(shiftBits, toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_bytes32_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(value)
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function prepare_store_t_bytes32(value) -> ret
            {
                ret := shift_right_0_unsigned(value)
            }
            function update_storage_value_t_bytes32_to_t_bytes32(slot, offset, value_0)
            {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_bytes32(convertedValue_0)))
            }
            function array_push_from_t_bytes32_to_t_array$_t_bytes32_$dyn_storage_ptr(array, value0)
            {
                let oldLen := sload(array)
                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }
                sstore(array, add(oldLen, 1))
                let slot, offset := storage_array_index_access_t_array$_t_bytes32_$dyn_storage_ptr(array, oldLen)
                update_storage_value_t_bytes32_to_t_bytes32(slot, offset, value0)
            }
            function array_length_t_array$_t_bytes32_$dyn_storage(value) -> length
            { length := sload(value) }
            function mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(slot, key) -> dataSlot
            {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function prepare_store_t_uint256(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }
            /// @ast-id 52 @src 0:2424:2828  "function _add(Set storage set, bytes32 value) private returns (bool) {..."
            function fun__add_52(var_set_14_slot, var_value_16) -> var__19
            {
                /// @src 0:2487:2491  "bool"
                let zero_t_bool_18 := zero_value_for_split_t_bool()
                var__19 := zero_t_bool_18
                /// @src 0:2518:2521  "set"
                let _19_slot := var_set_14_slot
                let expr_22_slot := _19_slot
                /// @src 0:2523:2528  "value"
                let _20 := var_value_16
                let expr_23 := _20
                /// @src 0:2508:2529  "_contains(set, value)"
                let expr_24 := fun__contains_155(expr_22_slot, expr_23)
                /// @src 0:2507:2529  "!_contains(set, value)"
                let expr_25 := cleanup_t_bool(iszero(expr_24))
                /// @src 0:2503:2822  "if (!_contains(set, value)) {..."
                switch expr_25
                case 0 {
                    /// @src 0:2806:2811  "false"
                    let expr_47 := 0x00
                    /// @src 0:2799:2811  "return false"
                    var__19 := expr_47
                    leave
                }
                default /// @src 0:2503:2822  "if (!_contains(set, value)) {..."
                {
                    /// @src 0:2545:2548  "set"
                    let _21_slot := var_set_14_slot
                    let expr_26_slot := _21_slot
                    /// @src 0:2545:2556  "set._values"
                    let _22 := add(expr_26_slot, 0)
                    let _23_slot := _22
                    let expr_29_slot := _23_slot
                    /// @src 0:2545:2561  "set._values.push"
                    let expr_30_self_slot := convert_array_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_storage_ptr(expr_29_slot)
                    /// @src 0:2562:2567  "value"
                    let _24 := var_value_16
                    let expr_31 := _24
                    /// @src 0:2545:2568  "set._values.push(value)"
                    array_push_from_t_bytes32_to_t_array$_t_bytes32_$dyn_storage_ptr(expr_30_self_slot, expr_31)
                    /// @src 0:2725:2728  "set"
                    let _25_slot := var_set_14_slot
                    let expr_39_slot := _25_slot
                    /// @src 0:2725:2736  "set._values"
                    let _26 := add(expr_39_slot, 0)
                    let _27_slot := _26
                    let expr_40_slot := _27_slot
                    /// @src 0:2725:2743  "set._values.length"
                    let expr_41 := array_length_t_array$_t_bytes32_$dyn_storage(expr_40_slot)
                    /// @src 0:2703:2706  "set"
                    let _28_slot := var_set_14_slot
                    let expr_34_slot := _28_slot
                    /// @src 0:2703:2715  "set._indexes"
                    let _29 := add(expr_34_slot, 1)
                    let _30_slot := _29
                    let expr_37_slot := _30_slot
                    /// @src 0:2716:2721  "value"
                    let _31 := var_value_16
                    let expr_36 := _31
                    /// @src 0:2703:2722  "set._indexes[value]"
                    let _32 := mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(expr_37_slot, expr_36)
                    /// @src 0:2703:2743  "set._indexes[value] = set._values.length"
                    update_storage_value_offset_0t_uint256_to_t_uint256(_32, expr_41)
                    let expr_42 := expr_41
                    /// @src 0:2764:2768  "true"
                    let expr_44 := 0x01
                    /// @src 0:2757:2768  "return true"
                    var__19 := expr_44
                    leave
                }
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function cleanup_from_storage_t_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint256(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint256(sload(slot))
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            /// @ast-id 155 @src 0:4465:4592  "function _contains(Set storage set, bytes32 value) private view returns (bool) {..."
            function fun__contains_155(var_set_140_slot, var_value_142) -> var__145
            {
                /// @src 0:4538:4542  "bool"
                let zero_t_bool_33 := zero_value_for_split_t_bool()
                var__145 := zero_t_bool_33
                /// @src 0:4561:4564  "set"
                let _34_slot := var_set_140_slot
                let expr_147_slot := _34_slot
                /// @src 0:4561:4573  "set._indexes"
                let _35 := add(expr_147_slot, 1)
                let _36_slot := _35
                let expr_148_slot := _36_slot
                /// @src 0:4574:4579  "value"
                let _37 := var_value_142
                let expr_149 := _37
                /// @src 0:4561:4580  "set._indexes[value]"
                let _38 := mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(expr_148_slot, expr_149)
                let _39 := read_from_storage_split_offset_0_t_uint256(_38)
                let expr_150 := _39
                /// @src 0:4584:4585  "0"
                let expr_151 := 0x00
                /// @src 0:4561:4585  "set._indexes[value] != 0"
                let expr_152 := iszero(eq(cleanup_t_uint256(expr_150), convert_t_rational_0_by_1_to_t_uint256(expr_151)))
                /// @src 0:4554:4585  "return set._indexes[value] != 0"
                var__145 := expr_152
                leave
            }
            /// @ast-id 1826 @src 0:34335:34484  "function unsubscribe(address lister) public {..."
            function fun_unsubscribe_1826(var_lister_1808)
            {
                /// @src 0:34389:34403  "_subscriptions"
                let _40_slot := 0x01
                let expr_1811_slot := _40_slot
                /// @src 0:34404:34414  "msg.sender"
                let expr_1813 := caller()
                /// @src 0:34389:34415  "_subscriptions[msg.sender]"
                let _41 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1811_slot, expr_1813)
                let _42_slot := _41
                let expr_1814_slot := _42_slot
                /// @src 0:34389:34422  "_subscriptions[msg.sender].remove"
                let expr_1815_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1814_slot)
                /// @src 0:34423:34429  "lister"
                let _43 := var_lister_1808
                let expr_1816 := _43
                /// @src 0:34389:34430  "_subscriptions[msg.sender].remove(lister)"
                let expr_1817 := fun_remove_379(expr_1815_self_slot, expr_1816)
                /// @src 0:34458:34468  "msg.sender"
                let expr_1821 := caller()
                /// @src 0:34470:34476  "lister"
                let _44 := var_lister_1808
                let expr_1822 := _44
                /// @src 0:34445:34477  "Unsubscribed(msg.sender, lister)"
                let _45 := 0x7773c30acd0762ed6b4b92a9aa2c6b3c074e29ad93b334cbed8ba807c596f13a
                let _46 := convert_t_address_to_t_address(expr_1821)
                let _47 := convert_t_address_to_t_address(expr_1822)
                {
                    let _48 := allocate_unbounded()
                    let _49 := abi_encode_tuple__to__fromStack(_48)
                    log3(_48, sub(_49, _48), _45, _46, _47)
                }
            }
            /// @ast-id 379 @src 0:8833:8989  "function remove(AddressSet storage set, address value) internal returns (bool) {..."
            function fun_remove_379(var_set_356_slot, var_value_358) -> var__361
            {
                /// @src 0:8906:8910  "bool"
                let zero_t_bool_50 := zero_value_for_split_t_bool()
                var__361 := zero_t_bool_50
                /// @src 0:8937:8940  "set"
                let _51_slot := var_set_356_slot
                let expr_364_slot := _51_slot
                /// @src 0:8937:8947  "set._inner"
                let _52 := add(expr_364_slot, 0)
                let _53_slot := _52
                let expr_365_slot := _53_slot
                /// @src 0:8973:8978  "value"
                let _54 := var_value_358
                let expr_372 := _54
                /// @src 0:8965:8979  "uint160(value)"
                let expr_373 := convert_t_address_to_t_uint160(expr_372)
                /// @src 0:8957:8980  "uint256(uint160(value))"
                let expr_374 := convert_t_uint160_to_t_uint256(expr_373)
                /// @src 0:8949:8981  "bytes32(uint256(uint160(value)))"
                let expr_375 := convert_t_uint256_to_t_bytes32(expr_374)
                /// @src 0:8929:8982  "_remove(set._inner, bytes32(uint256(uint160(value))))"
                let _55_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_365_slot)
                let expr_376 := fun__remove_136(_55_slot, expr_375)
                /// @src 0:8922:8982  "return _remove(set._inner, bytes32(uint256(uint160(value))))"
                var__361 := expr_376
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                diff := sub(x, y)
                if gt(diff, x) { panic_error_0x11() }
            }
            function array_dataslot_t_array$_t_bytes32_$dyn_storage(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function storage_array_index_access_t_array$_t_bytes32_$dyn_storage(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_bytes32_$dyn_storage(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_bytes32_$dyn_storage(array)
                slot := add(dataArea, mul(index, 1))
                offset := 0
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)
            }
            function panic_error_0x31()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x31)
                revert(0, 0x24)
            }
            function zero_value_for_split_t_bytes32() -> ret
            { ret := 0 }
            function storage_set_to_zero_t_bytes32(slot, offset)
            {
                let zero_0 := zero_value_for_split_t_bytes32()
                update_storage_value_t_bytes32_to_t_bytes32(slot, offset, zero_0)
            }
            function array_pop_t_array$_t_bytes32_$dyn_storage_ptr(array)
            {
                let oldLen := array_length_t_array$_t_bytes32_$dyn_storage_ptr(array)
                if iszero(oldLen) { panic_error_0x31() }
                let newLen := sub(oldLen, 1)
                let slot, offset := storage_array_index_access_t_array$_t_bytes32_$dyn_storage_ptr(array, newLen)
                storage_set_to_zero_t_bytes32(slot, offset)
                sstore(array, newLen)
            }
            function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))
            }
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function storage_set_to_zero_t_uint256(slot, offset)
            {
                let zero_0 := zero_value_for_split_t_uint256()
                update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)
            }
            /// @ast-id 136 @src 0:2996:4384  "function _remove(Set storage set, bytes32 value) private returns (bool) {..."
            function fun__remove_136(var_set_56_slot, var_value_58) -> var__61
            {
                /// @src 0:3062:3066  "bool"
                let zero_t_bool_56 := zero_value_for_split_t_bool()
                var__61 := zero_t_bool_56
                /// @src 0:3199:3202  "set"
                let _57_slot := var_set_56_slot
                let expr_65_slot := _57_slot
                /// @src 0:3199:3211  "set._indexes"
                let _58 := add(expr_65_slot, 1)
                let _59_slot := _58
                let expr_66_slot := _59_slot
                /// @src 0:3212:3217  "value"
                let _60 := var_value_58
                let expr_67 := _60
                /// @src 0:3199:3218  "set._indexes[value]"
                let _61 := mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(expr_66_slot, expr_67)
                let _62 := read_from_storage_split_offset_0_t_uint256(_61)
                let expr_68 := _62
                /// @src 0:3178:3218  "uint256 valueIndex = set._indexes[value]"
                let var_valueIndex_64 := expr_68
                /// @src 0:3233:3243  "valueIndex"
                let _63 := var_valueIndex_64
                let expr_70 := _63
                /// @src 0:3247:3248  "0"
                let expr_71 := 0x00
                /// @src 0:3233:3248  "valueIndex != 0"
                let expr_72 := iszero(eq(cleanup_t_uint256(expr_70), convert_t_rational_0_by_1_to_t_uint256(expr_71)))
                /// @src 0:3229:4378  "if (valueIndex != 0) {..."
                switch expr_72
                case 0 {
                    /// @src 0:4362:4367  "false"
                    let expr_131 := 0x00
                    /// @src 0:4355:4367  "return false"
                    var__61 := expr_131
                    leave
                }
                default /// @src 0:3229:4378  "if (valueIndex != 0) {..."
                {
                    /// @src 0:3626:3636  "valueIndex"
                    let _64 := var_valueIndex_64
                    let expr_75 := _64
                    /// @src 0:3639:3640  "1"
                    let expr_76 := 0x01
                    /// @src 0:3626:3640  "valueIndex - 1"
                    let expr_77 := checked_sub_t_uint256(expr_75, convert_t_rational_1_by_1_to_t_uint256(expr_76))
                    /// @src 0:3602:3640  "uint256 toDeleteIndex = valueIndex - 1"
                    let var_toDeleteIndex_74 := expr_77
                    /// @src 0:3674:3677  "set"
                    let _65_slot := var_set_56_slot
                    let expr_81_slot := _65_slot
                    /// @src 0:3674:3685  "set._values"
                    let _66 := add(expr_81_slot, 0)
                    let _67_slot := _66
                    let expr_82_slot := _67_slot
                    /// @src 0:3674:3692  "set._values.length"
                    let expr_83 := array_length_t_array$_t_bytes32_$dyn_storage(expr_82_slot)
                    /// @src 0:3695:3696  "1"
                    let expr_84 := 0x01
                    /// @src 0:3674:3696  "set._values.length - 1"
                    let expr_85 := checked_sub_t_uint256(expr_83, convert_t_rational_1_by_1_to_t_uint256(expr_84))
                    /// @src 0:3654:3696  "uint256 lastIndex = set._values.length - 1"
                    let var_lastIndex_80 := expr_85
                    /// @src 0:3715:3724  "lastIndex"
                    let _68 := var_lastIndex_80
                    let expr_87 := _68
                    /// @src 0:3728:3741  "toDeleteIndex"
                    let _69 := var_toDeleteIndex_74
                    let expr_88 := _69
                    /// @src 0:3715:3741  "lastIndex != toDeleteIndex"
                    let expr_89 := iszero(eq(cleanup_t_uint256(expr_87), cleanup_t_uint256(expr_88)))
                    /// @src 0:3711:4109  "if (lastIndex != toDeleteIndex) {..."
                    if expr_89
                    {
                        /// @src 0:3781:3784  "set"
                        let _70_slot := var_set_56_slot
                        let expr_92_slot := _70_slot
                        /// @src 0:3781:3792  "set._values"
                        let _71 := add(expr_92_slot, 0)
                        let _72_slot := _71
                        let expr_93_slot := _72_slot
                        /// @src 0:3793:3802  "lastIndex"
                        let _73 := var_lastIndex_80
                        let expr_94 := _73
                        /// @src 0:3781:3803  "set._values[lastIndex]"
                        let _74, _75 := storage_array_index_access_t_array$_t_bytes32_$dyn_storage(expr_93_slot, expr_94)
                        let _76 := read_from_storage_split_dynamic_t_bytes32(_74, _75)
                        let expr_95 := _76
                        /// @src 0:3761:3803  "bytes32 lastValue = set._values[lastIndex]"
                        let var_lastValue_91 := expr_95
                        /// @src 0:3932:3941  "lastValue"
                        let _77 := var_lastValue_91
                        let expr_102 := _77
                        /// @src 0:3903:3906  "set"
                        let _78_slot := var_set_56_slot
                        let expr_97_slot := _78_slot
                        /// @src 0:3903:3914  "set._values"
                        let _79 := add(expr_97_slot, 0)
                        let _80_slot := _79
                        let expr_100_slot := _80_slot
                        /// @src 0:3915:3928  "toDeleteIndex"
                        let _81 := var_toDeleteIndex_74
                        let expr_99 := _81
                        /// @src 0:3903:3929  "set._values[toDeleteIndex]"
                        let _82, _83 := storage_array_index_access_t_array$_t_bytes32_$dyn_storage(expr_100_slot, expr_99)
                        /// @src 0:3903:3941  "set._values[toDeleteIndex] = lastValue"
                        update_storage_value_t_bytes32_to_t_bytes32(_82, _83, expr_102)
                        let expr_103 := expr_102
                        /// @src 0:4041:4051  "valueIndex"
                        let _84 := var_valueIndex_64
                        let expr_110 := _84
                        /// @src 0:4015:4018  "set"
                        let _85_slot := var_set_56_slot
                        let expr_105_slot := _85_slot
                        /// @src 0:4015:4027  "set._indexes"
                        let _86 := add(expr_105_slot, 1)
                        let _87_slot := _86
                        let expr_108_slot := _87_slot
                        /// @src 0:4028:4037  "lastValue"
                        let _88 := var_lastValue_91
                        let expr_107 := _88
                        /// @src 0:4015:4038  "set._indexes[lastValue]"
                        let _89 := mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(expr_108_slot, expr_107)
                        /// @src 0:4015:4051  "set._indexes[lastValue] = valueIndex"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_89, expr_110)
                        let expr_111 := expr_110
                    }
                    /// @src 0:4187:4190  "set"
                    let _90_slot := var_set_56_slot
                    let expr_115_slot := _90_slot
                    /// @src 0:4187:4198  "set._values"
                    let _91 := add(expr_115_slot, 0)
                    let _92_slot := _91
                    let expr_118_slot := _92_slot
                    /// @src 0:4187:4202  "set._values.pop"
                    let expr_119_self_slot := convert_array_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_storage_ptr(expr_118_slot)
                    array_pop_t_array$_t_bytes32_$dyn_storage_ptr(expr_119_self_slot)
                    /// @src 0:4279:4282  "set"
                    let _93_slot := var_set_56_slot
                    let expr_122_slot := _93_slot
                    /// @src 0:4279:4291  "set._indexes"
                    let _94 := add(expr_122_slot, 1)
                    let _95_slot := _94
                    let expr_123_slot := _95_slot
                    /// @src 0:4292:4297  "value"
                    let _96 := var_value_58
                    let expr_124 := _96
                    /// @src 0:4279:4298  "set._indexes[value]"
                    let _97 := mapping_index_access_t_mapping$_t_bytes32_$_t_uint256_$_of_t_bytes32(expr_123_slot, expr_124)
                    /// @src 0:4272:4298  "delete set._indexes[value]"
                    storage_set_to_zero_t_uint256(_97, 0)
                    /// @src 0:4320:4324  "true"
                    let expr_128 := 0x01
                    /// @src 0:4313:4324  "return true"
                    var__61 := expr_128
                    leave
                }
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function wrapping_add_t_uint256(x, y) -> sum
            {
                sum := cleanup_t_uint256(add(x, y))
            }
            function mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function convert_t_struct$_AddressToUintMap_$1299_storage_to_t_struct$_AddressToUintMap_$1299_storage_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1857 @src 0:34726:34989  "function addOperator(address operator) public {..."
            function fun_addOperator_1857(var_operator_1829)
            {
                /// @src 0:34823:34838  "block.timestamp"
                let expr_1835 := timestamp()
                /// @src 0:34841:34852  "START_DELAY"
                let expr_1836 := constant_START_DELAY_1742()
                /// @src 0:34823:34852  "block.timestamp + START_DELAY"
                let expr_1837 := wrapping_add_t_uint256(expr_1835, expr_1836)
                /// @src 0:34806:34852  "uint256 begins = block.timestamp + START_DELAY"
                let var_begins_1833 := expr_1837
                /// @src 0:34866:34876  "_operators"
                let _98_slot := 0x00
                let expr_1839_slot := _98_slot
                /// @src 0:34877:34887  "msg.sender"
                let expr_1841 := caller()
                /// @src 0:34866:34888  "_operators[msg.sender]"
                let _99 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_1839_slot, expr_1841)
                let _100_slot := _99
                let expr_1842_slot := _100_slot
                /// @src 0:34866:34892  "_operators[msg.sender].set"
                let expr_1843_self_slot := convert_t_struct$_AddressToUintMap_$1299_storage_to_t_struct$_AddressToUintMap_$1299_storage_ptr(expr_1842_slot)
                /// @src 0:34893:34901  "operator"
                let _101 := var_operator_1829
                let expr_1844 := _101
                /// @src 0:34903:34909  "begins"
                let _102 := var_begins_1833
                let expr_1845 := _102
                /// @src 0:34866:34910  "_operators[msg.sender].set(operator, begins)"
                let expr_1846 := fun_set_1332(expr_1843_self_slot, expr_1844, expr_1845)
                /// @src 0:34943:34953  "msg.sender"
                let expr_1850 := caller()
                /// @src 0:34955:34963  "operator"
                let _103 := var_operator_1829
                let expr_1851 := _103
                /// @src 0:34965:34971  "begins"
                let _104 := var_begins_1833
                let expr_1852 := _104
                /// @src 0:34929:34972  "OperatorAdded(msg.sender, operator, begins)"
                let _105 := 0x20c899c9053446f0d7a408c709f0196e2c26c6a985dcad854dc19ad567c4531f
                let _106 := convert_t_address_to_t_address(expr_1850)
                let _107 := convert_t_address_to_t_address(expr_1851)
                let _108 := convert_t_uint256_to_t_uint256(expr_1852)
                {
                    let _109 := allocate_unbounded()
                    let _110 := abi_encode_tuple__to__fromStack(_109)
                    log4(_109, sub(_110, _109), _105, _106, _107, _108)
                }
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function convert_t_struct$_Bytes32ToBytes32Map_$625_storage_to_t_struct$_Bytes32ToBytes32Map_$625_storage_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1332 @src 0:24668:24880  "function set(..."
            function fun_set_1332(var_map_1303_slot, var_key_1305, var_value_1307) -> var__1310
            {
                /// @src 0:24787:24791  "bool"
                let zero_t_bool_111 := zero_value_for_split_t_bool()
                var__1310 := zero_t_bool_111
                /// @src 0:24814:24817  "map"
                let _112_slot := var_map_1303_slot
                let expr_1313_slot := _112_slot
                /// @src 0:24814:24824  "map._inner"
                let _113 := add(expr_1313_slot, 0)
                let _114_slot := _113
                let expr_1314_slot := _114_slot
                /// @src 0:24850:24853  "key"
                let _115 := var_key_1305
                let expr_1321 := _115
                /// @src 0:24842:24854  "uint160(key)"
                let expr_1322 := convert_t_address_to_t_uint160(expr_1321)
                /// @src 0:24834:24855  "uint256(uint160(key))"
                let expr_1323 := convert_t_uint160_to_t_uint256(expr_1322)
                /// @src 0:24826:24856  "bytes32(uint256(uint160(key)))"
                let expr_1324 := convert_t_uint256_to_t_bytes32(expr_1323)
                /// @src 0:24866:24871  "value"
                let _116 := var_value_1307
                let expr_1327 := _116
                /// @src 0:24858:24872  "bytes32(value)"
                let expr_1328 := convert_t_uint256_to_t_bytes32(expr_1327)
                /// @src 0:24810:24873  "set(map._inner, bytes32(uint256(uint160(key))), bytes32(value))"
                let _117_slot := convert_t_struct$_Bytes32ToBytes32Map_$625_storage_to_t_struct$_Bytes32ToBytes32Map_$625_storage_ptr(expr_1314_slot)
                let expr_1329 := fun_set_653(_117_slot, expr_1324, expr_1328)
                /// @src 0:24803:24873  "return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value))"
                var__1310 := expr_1329
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(slot, key) -> dataSlot
            {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
            {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }
            function convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(value) -> converted
            { converted := value }
            /// @ast-id 653 @src 0:15445:15649  "function set(..."
            function fun_set_653(var_map_629_slot, var_key_631, var_value_633) -> var__636
            {
                /// @src 0:15567:15571  "bool"
                let zero_t_bool_118 := zero_value_for_split_t_bool()
                var__636 := zero_t_bool_118
                /// @src 0:15602:15607  "value"
                let _119 := var_value_633
                let expr_643 := _119
                /// @src 0:15583:15586  "map"
                let _120_slot := var_map_629_slot
                let expr_638_slot := _120_slot
                /// @src 0:15583:15594  "map._values"
                let _121 := add(expr_638_slot, 2)
                let _122_slot := _121
                let expr_641_slot := _122_slot
                /// @src 0:15595:15598  "key"
                let _123 := var_key_631
                let expr_640 := _123
                /// @src 0:15583:15599  "map._values[key]"
                let _124 := mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(expr_641_slot, expr_640)
                /// @src 0:15583:15607  "map._values[key] = value"
                update_storage_value_offset_0t_bytes32_to_t_bytes32(_124, expr_643)
                let expr_644 := expr_643
                /// @src 0:15624:15627  "map"
                let _125_slot := var_map_629_slot
                let expr_646_slot := _125_slot
                /// @src 0:15624:15633  "map._keys"
                let _126 := add(expr_646_slot, 0)
                let _127_slot := _126
                let expr_647_slot := _127_slot
                /// @src 0:15624:15637  "map._keys.add"
                let expr_648_self_slot := convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(expr_647_slot)
                /// @src 0:15638:15641  "key"
                let _128 := var_key_631
                let expr_649 := _128
                /// @src 0:15624:15642  "map._keys.add(key)"
                let expr_650 := fun_add_222(expr_648_self_slot, expr_649)
                /// @src 0:15617:15642  "return map._keys.add(key)"
                var__636 := expr_650
                leave
            }
            /// @ast-id 222 @src 0:6129:6252  "function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {..."
            function fun_add_222(var_set_208_slot, var_value_210) -> var__213
            {
                /// @src 0:6199:6203  "bool"
                let zero_t_bool_129 := zero_value_for_split_t_bool()
                var__213 := zero_t_bool_129
                /// @src 0:6227:6230  "set"
                let _130_slot := var_set_208_slot
                let expr_216_slot := _130_slot
                /// @src 0:6227:6237  "set._inner"
                let _131 := add(expr_216_slot, 0)
                let _132_slot := _131
                let expr_217_slot := _132_slot
                /// @src 0:6239:6244  "value"
                let _133 := var_value_210
                let expr_218 := _133
                /// @src 0:6222:6245  "_add(set._inner, value)"
                let _134_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_217_slot)
                let expr_219 := fun__add_52(_134_slot, expr_218)
                /// @src 0:6215:6245  "return _add(set._inner, value)"
                var__213 := expr_219
                leave
            }
            /// @ast-id 1878 @src 0:35236:35393  "function removeOperator(address operator) public {..."
            function fun_removeOperator_1878(var_operator_1860)
            {
                /// @src 0:35295:35305  "_operators"
                let _135_slot := 0x00
                let expr_1863_slot := _135_slot
                /// @src 0:35306:35316  "msg.sender"
                let expr_1865 := caller()
                /// @src 0:35295:35317  "_operators[msg.sender]"
                let _136 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_1863_slot, expr_1865)
                let _137_slot := _136
                let expr_1866_slot := _137_slot
                /// @src 0:35295:35324  "_operators[msg.sender].remove"
                let expr_1867_self_slot := convert_t_struct$_AddressToUintMap_$1299_storage_to_t_struct$_AddressToUintMap_$1299_storage_ptr(expr_1866_slot)
                /// @src 0:35325:35333  "operator"
                let _138 := var_operator_1860
                let expr_1868 := _138
                /// @src 0:35295:35334  "_operators[msg.sender].remove(operator)"
                let expr_1869 := fun_remove_1359(expr_1867_self_slot, expr_1868)
                /// @src 0:35365:35375  "msg.sender"
                let expr_1873 := caller()
                /// @src 0:35377:35385  "operator"
                let _139 := var_operator_1860
                let expr_1874 := _139
                /// @src 0:35349:35386  "OperatorRemoved(msg.sender, operator)"
                let _140 := 0x17d7f044d47e4fae1701f86266d0a674db3f792671bd1b974ace77a09af1c827
                let _141 := convert_t_address_to_t_address(expr_1873)
                let _142 := convert_t_address_to_t_address(expr_1874)
                {
                    let _143 := allocate_unbounded()
                    let _144 := abi_encode_tuple__to__fromStack(_143)
                    log3(_143, sub(_144, _143), _140, _141, _142)
                }
            }
            /// @ast-id 1359 @src 0:25039:25196  "function remove(AddressToUintMap storage map, address key) internal returns (bool) {..."
            function fun_remove_1359(var_map_1336_slot, var_key_1338) -> var__1341
            {
                /// @src 0:25116:25120  "bool"
                let zero_t_bool_145 := zero_value_for_split_t_bool()
                var__1341 := zero_t_bool_145
                /// @src 0:25146:25149  "map"
                let _146_slot := var_map_1336_slot
                let expr_1344_slot := _146_slot
                /// @src 0:25146:25156  "map._inner"
                let _147 := add(expr_1344_slot, 0)
                let _148_slot := _147
                let expr_1345_slot := _148_slot
                /// @src 0:25182:25185  "key"
                let _149 := var_key_1338
                let expr_1352 := _149
                /// @src 0:25174:25186  "uint160(key)"
                let expr_1353 := convert_t_address_to_t_uint160(expr_1352)
                /// @src 0:25166:25187  "uint256(uint160(key))"
                let expr_1354 := convert_t_uint160_to_t_uint256(expr_1353)
                /// @src 0:25158:25188  "bytes32(uint256(uint160(key)))"
                let expr_1355 := convert_t_uint256_to_t_bytes32(expr_1354)
                /// @src 0:25139:25189  "remove(map._inner, bytes32(uint256(uint160(key))))"
                let _150_slot := convert_t_struct$_Bytes32ToBytes32Map_$625_storage_to_t_struct$_Bytes32ToBytes32Map_$625_storage_ptr(expr_1345_slot)
                let expr_1356 := fun_remove_677(_150_slot, expr_1355)
                /// @src 0:25132:25189  "return remove(map._inner, bytes32(uint256(uint160(key))))"
                var__1341 := expr_1356
                leave
            }
            /// @ast-id 677 @src 0:15817:15981  "function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {..."
            function fun_remove_677(var_map_657_slot, var_key_659) -> var__662
            {
                /// @src 0:15897:15901  "bool"
                let zero_t_bool_151 := zero_value_for_split_t_bool()
                var__662 := zero_t_bool_151
                /// @src 0:15920:15923  "map"
                let _152_slot := var_map_657_slot
                let expr_664_slot := _152_slot
                /// @src 0:15920:15931  "map._values"
                let _153 := add(expr_664_slot, 2)
                let _154_slot := _153
                let expr_665_slot := _154_slot
                /// @src 0:15932:15935  "key"
                let _155 := var_key_659
                let expr_666 := _155
                /// @src 0:15920:15936  "map._values[key]"
                let _156 := mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(expr_665_slot, expr_666)
                /// @src 0:15913:15936  "delete map._values[key]"
                storage_set_to_zero_t_bytes32(_156, 0)
                /// @src 0:15953:15956  "map"
                let _157_slot := var_map_657_slot
                let expr_670_slot := _157_slot
                /// @src 0:15953:15962  "map._keys"
                let _158 := add(expr_670_slot, 0)
                let _159_slot := _158
                let expr_671_slot := _159_slot
                /// @src 0:15953:15969  "map._keys.remove"
                let expr_672_self_slot := convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(expr_671_slot)
                /// @src 0:15970:15973  "key"
                let _160 := var_key_659
                let expr_673 := _160
                /// @src 0:15953:15974  "map._keys.remove(key)"
                let expr_674 := fun_remove_240(expr_672_self_slot, expr_673)
                /// @src 0:15946:15974  "return map._keys.remove(key)"
                var__662 := expr_674
                leave
            }
            /// @ast-id 240 @src 0:6420:6549  "function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {..."
            function fun_remove_240(var_set_226_slot, var_value_228) -> var__231
            {
                /// @src 0:6493:6497  "bool"
                let zero_t_bool_161 := zero_value_for_split_t_bool()
                var__231 := zero_t_bool_161
                /// @src 0:6524:6527  "set"
                let _162_slot := var_set_226_slot
                let expr_234_slot := _162_slot
                /// @src 0:6524:6534  "set._inner"
                let _163 := add(expr_234_slot, 0)
                let _164_slot := _163
                let expr_235_slot := _164_slot
                /// @src 0:6536:6541  "value"
                let _165 := var_value_228
                let expr_236 := _165
                /// @src 0:6516:6542  "_remove(set._inner, value)"
                let _166_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_235_slot)
                let expr_237 := fun__remove_136(_166_slot, expr_236)
                /// @src 0:6509:6542  "return _remove(set._inner, value)"
                var__231 := expr_237
                leave
            }
            /// @ast-id 1898 @src 0:35859:36015  "function hasSubscription(address collector, address lister) public view returns (bool has) {..."
            function fun_hasSubscription_1898(var_collector_1881, var_lister_1883) -> var_has_1886
            {
                /// @src 0:35940:35948  "bool has"
                let zero_t_bool_167 := zero_value_for_split_t_bool()
                var_has_1886 := zero_t_bool_167
                /// @src 0:35966:35980  "_subscriptions"
                let _168_slot := 0x01
                let expr_1889_slot := _168_slot
                /// @src 0:35981:35990  "collector"
                let _169 := var_collector_1881
                let expr_1890 := _169
                /// @src 0:35966:35991  "_subscriptions[collector]"
                let _170 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1889_slot, expr_1890)
                let _171_slot := _170
                let expr_1891_slot := _171_slot
                /// @src 0:35966:36000  "_subscriptions[collector].contains"
                let expr_1892_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1891_slot)
                /// @src 0:36001:36007  "lister"
                let _172 := var_lister_1883
                let expr_1893 := _172
                /// @src 0:35966:36008  "_subscriptions[collector].contains(lister)"
                let expr_1894 := fun_contains_406(expr_1892_self_slot, expr_1893)
                /// @src 0:35960:36008  "has = _subscriptions[collector].contains(lister)"
                var_has_1886 := expr_1894
                let expr_1895 := expr_1894
            }
            /// @ast-id 406 @src 0:9070:9235  "function contains(AddressSet storage set, address value) internal view returns (bool) {..."
            function fun_contains_406(var_set_383_slot, var_value_385) -> var__388
            {
                /// @src 0:9150:9154  "bool"
                let zero_t_bool_173 := zero_value_for_split_t_bool()
                var__388 := zero_t_bool_173
                /// @src 0:9183:9186  "set"
                let _174_slot := var_set_383_slot
                let expr_391_slot := _174_slot
                /// @src 0:9183:9193  "set._inner"
                let _175 := add(expr_391_slot, 0)
                let _176_slot := _175
                let expr_392_slot := _176_slot
                /// @src 0:9219:9224  "value"
                let _177 := var_value_385
                let expr_399 := _177
                /// @src 0:9211:9225  "uint160(value)"
                let expr_400 := convert_t_address_to_t_uint160(expr_399)
                /// @src 0:9203:9226  "uint256(uint160(value))"
                let expr_401 := convert_t_uint160_to_t_uint256(expr_400)
                /// @src 0:9195:9227  "bytes32(uint256(uint160(value)))"
                let expr_402 := convert_t_uint256_to_t_bytes32(expr_401)
                /// @src 0:9173:9228  "_contains(set._inner, bytes32(uint256(uint160(value))))"
                let _178_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_392_slot)
                let expr_403 := fun__contains_155(_178_slot, expr_402)
                /// @src 0:9166:9228  "return _contains(set._inner, bytes32(uint256(uint160(value))))"
                var__388 := expr_403
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function zero_value_for_split_t_array$_t_address_$dyn_memory_ptr() -> ret
            { ret := 96 }
            /// @ast-id 1916 @src 0:36224:36368  "function subscriptions(address collector) public view returns (address[] memory list) {..."
            function fun_subscriptions_1916(var_collector_1901) -> var_list_1905_mpos
            {
                /// @src 0:36287:36308  "address[] memory list"
                let zero_t_array$_t_address_$dyn_memory_ptr_179_mpos := zero_value_for_split_t_array$_t_address_$dyn_memory_ptr()
                var_list_1905_mpos := zero_t_array$_t_address_$dyn_memory_ptr_179_mpos
                /// @src 0:36327:36341  "_subscriptions"
                let _180_slot := 0x01
                let expr_1908_slot := _180_slot
                /// @src 0:36342:36351  "collector"
                let _181 := var_collector_1901
                let expr_1909 := _181
                /// @src 0:36327:36352  "_subscriptions[collector]"
                let _182 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1908_slot, expr_1909)
                let _183_slot := _182
                let expr_1910_slot := _183_slot
                /// @src 0:36327:36359  "_subscriptions[collector].values"
                let expr_1911_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1910_slot)
                /// @src 0:36327:36361  "_subscriptions[collector].values()"
                let expr_1912_mpos := fun_values_478(expr_1911_self_slot)
                /// @src 0:36320:36361  "list = _subscriptions[collector].values()"
                var_list_1905_mpos := expr_1912_mpos
                let _184_mpos := var_list_1905_mpos
                let expr_1913_mpos := _184_mpos
            }
            /// @ast-id 478 @src 0:10469:10769  "function values(AddressSet storage set) internal view returns (address[] memory) {..."
            function fun_values_478(var_set_452_slot) -> var__456_mpos
            {
                /// @src 0:10532:10548  "address[] memory"
                let zero_t_array$_t_address_$dyn_memory_ptr_185_mpos := zero_value_for_split_t_array$_t_address_$dyn_memory_ptr()
                var__456_mpos := zero_t_array$_t_address_$dyn_memory_ptr_185_mpos
                /// @src 0:10593:10596  "set"
                let _186_slot := var_set_452_slot
                let expr_464_slot := _186_slot
                /// @src 0:10593:10603  "set._inner"
                let _187 := add(expr_464_slot, 0)
                let _188_slot := _187
                let expr_465_slot := _188_slot
                /// @src 0:10585:10604  "_values(set._inner)"
                let _189_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_465_slot)
                let expr_466_mpos := fun__values_200(_189_slot)
                /// @src 0:10560:10604  "bytes32[] memory store = _values(set._inner)"
                let var_store_462_mpos := expr_466_mpos
                /// @src 0:10614:10637  "address[] memory result"
                let var_result_472_mpos
                let zero_t_array$_t_address_$dyn_memory_ptr_190_mpos := zero_value_for_split_t_array$_t_address_$dyn_memory_ptr()
                var_result_472_mpos := zero_t_array$_t_address_$dyn_memory_ptr_190_mpos
                /// @src 0:10691:10739  "assembly {..."
                {
                    var_result_472_mpos := var_store_462_mpos
                }
                /// @src 0:10756:10762  "result"
                let _191_mpos := var_result_472_mpos
                let expr_475_mpos := _191_mpos
                /// @src 0:10749:10762  "return result"
                var__456_mpos := expr_475_mpos
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function zero_value_for_split_t_array$_t_bytes32_$dyn_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function abi_encode_t_bytes32_to_t_bytes32(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function abi_encodeUpdatedPos_t_bytes32_to_t_bytes32(value0, pos) -> updatedPos
            {
                abi_encode_t_bytes32_to_t_bytes32(value0, pos)
                updatedPos := add(pos, 0x20)
            }
            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            function array_nextElement_t_array$_t_bytes32_$dyn_storage(ptr) -> next
            { next := add(ptr, 0x01) }
            function abi_encode_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(value, pos) -> end
            {
                let length := array_length_t_array$_t_bytes32_$dyn_storage(value)
                pos := array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr(pos, length)
                let baseRef := array_dataslot_t_array$_t_bytes32_$dyn_storage(value)
                let srcPtr := baseRef
                for { let i := 0 } lt(i, length) { i := add(i, 1) }
                {
                    let elementValue0 := read_from_storage_offset_0_t_bytes32(srcPtr)
                    pos := abi_encodeUpdatedPos_t_bytes32_to_t_bytes32(elementValue0, pos)
                    srcPtr := array_nextElement_t_array$_t_bytes32_$dyn_storage(srcPtr)
                }
                end := pos
            }
            function abi_encodeUpdatedPos_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(value0, pos) -> updatedPos
            {
                updatedPos := abi_encode_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(value0, pos)
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function copy_array_from_storage_to_memory_t_array$_t_bytes32_$dyn_storage(slot) -> memPtr
            {
                memPtr := allocate_unbounded()
                let end := abi_encodeUpdatedPos_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(slot, memPtr)
                finalize_allocation(memPtr, sub(end, memPtr))
            }
            function convert_array_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(value) -> converted
            {
                converted := copy_array_from_storage_to_memory_t_array$_t_bytes32_$dyn_storage(value)
            }
            /// @ast-id 200 @src 0:5780:5889  "function _values(Set storage set) private view returns (bytes32[] memory) {..."
            function fun__values_200(var_set_190_slot) -> var__194_mpos
            {
                /// @src 0:5836:5852  "bytes32[] memory"
                let zero_t_array$_t_bytes32_$dyn_memory_ptr_192_mpos := zero_value_for_split_t_array$_t_bytes32_$dyn_memory_ptr()
                var__194_mpos := zero_t_array$_t_bytes32_$dyn_memory_ptr_192_mpos
                /// @src 0:5871:5874  "set"
                let _193_slot := var_set_190_slot
                let expr_196_slot := _193_slot
                /// @src 0:5871:5882  "set._values"
                let _194 := add(expr_196_slot, 0)
                let _195_slot := _194
                let expr_197_slot := _195_slot
                /// @src 0:5864:5882  "return set._values"
                var__194_mpos := convert_array_t_array$_t_bytes32_$dyn_storage_to_t_array$_t_bytes32_$dyn_memory_ptr(expr_197_slot)
                leave
            }
            /// @ast-id 1933 @src 0:36612:36754  "function totalSubscriptions(address collector) public view returns (uint256 total) {..."
            function fun_totalSubscriptions_1933(var_collector_1919) -> var_total_1922
            {
                /// @src 0:36680:36693  "uint256 total"
                let zero_t_uint256_196 := zero_value_for_split_t_uint256()
                var_total_1922 := zero_t_uint256_196
                /// @src 0:36713:36727  "_subscriptions"
                let _197_slot := 0x01
                let expr_1925_slot := _197_slot
                /// @src 0:36728:36737  "collector"
                let _198 := var_collector_1919
                let expr_1926 := _198
                /// @src 0:36713:36738  "_subscriptions[collector]"
                let _199 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1925_slot, expr_1926)
                let _200_slot := _199
                let expr_1927_slot := _200_slot
                /// @src 0:36713:36745  "_subscriptions[collector].length"
                let expr_1928_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1927_slot)
                /// @src 0:36713:36747  "_subscriptions[collector].length()"
                let expr_1929 := fun_length_421(expr_1928_self_slot)
                /// @src 0:36705:36747  "total = _subscriptions[collector].length()"
                var_total_1922 := expr_1929
                let expr_1930 := expr_1929
            }
            /// @ast-id 421 @src 0:9316:9431  "function length(AddressSet storage set) internal view returns (uint256) {..."
            function fun_length_421(var_set_410_slot) -> var__413
            {
                /// @src 0:9379:9386  "uint256"
                let zero_t_uint256_201 := zero_value_for_split_t_uint256()
                var__413 := zero_t_uint256_201
                /// @src 0:9413:9416  "set"
                let _202_slot := var_set_410_slot
                let expr_416_slot := _202_slot
                /// @src 0:9413:9423  "set._inner"
                let _203 := add(expr_416_slot, 0)
                let _204_slot := _203
                let expr_417_slot := _204_slot
                /// @src 0:9405:9424  "_length(set._inner)"
                let _205_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_417_slot)
                let expr_418 := fun__length_169(_205_slot)
                /// @src 0:9398:9424  "return _length(set._inner)"
                var__413 := expr_418
                leave
            }
            /// @ast-id 169 @src 0:4673:4780  "function _length(Set storage set) private view returns (uint256) {..."
            function fun__length_169(var_set_159_slot) -> var__162
            {
                /// @src 0:4729:4736  "uint256"
                let zero_t_uint256_206 := zero_value_for_split_t_uint256()
                var__162 := zero_t_uint256_206
                /// @src 0:4755:4758  "set"
                let _207_slot := var_set_159_slot
                let expr_164_slot := _207_slot
                /// @src 0:4755:4766  "set._values"
                let _208 := add(expr_164_slot, 0)
                let _209_slot := _208
                let expr_165_slot := _209_slot
                /// @src 0:4755:4773  "set._values.length"
                let expr_166 := array_length_t_array$_t_bytes32_$dyn_storage(expr_165_slot)
                /// @src 0:4748:4773  "return set._values.length"
                var__162 := expr_166
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function zero_value_for_split_t_address() -> ret
            { ret := 0 }
            /// @ast-id 1953 @src 0:37034:37218  "function subscriptionAt(address collector, uint256 index)..."
            function fun_subscriptionAt_1953(var_collector_1936, var_index_1938) -> var_lister_1941
            {
                /// @src 0:37137:37151  "address lister"
                let zero_t_address_210 := zero_value_for_split_t_address()
                var_lister_1941 := zero_t_address_210
                /// @src 0:37176:37190  "_subscriptions"
                let _211_slot := 0x01
                let expr_1944_slot := _211_slot
                /// @src 0:37191:37200  "collector"
                let _212 := var_collector_1936
                let expr_1945 := _212
                /// @src 0:37176:37201  "_subscriptions[collector]"
                let _213 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_1944_slot, expr_1945)
                let _214_slot := _213
                let expr_1946_slot := _214_slot
                /// @src 0:37176:37204  "_subscriptions[collector].at"
                let expr_1947_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_1946_slot)
                /// @src 0:37205:37210  "index"
                let _215 := var_index_1938
                let expr_1948 := _215
                /// @src 0:37176:37211  "_subscriptions[collector].at(index)"
                let expr_1949 := fun_at_448(expr_1947_self_slot, expr_1948)
                /// @src 0:37167:37211  "lister = _subscriptions[collector].at(index)"
                var_lister_1941 := expr_1949
                let expr_1950 := expr_1949
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function convert_t_bytes32_to_t_uint256(value) -> converted
            {
                converted := convert_t_uint256_to_t_uint256(shift_right_0_unsigned(value))
            }
            function convert_t_uint256_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint256(value)))
            }
            /// @ast-id 448 @src 0:9773:9929  "function at(AddressSet storage set, uint256 index) internal view returns (address) {..."
            function fun_at_448(var_set_425_slot, var_index_427) -> var__430
            {
                /// @src 0:9847:9854  "address"
                let zero_t_address_216 := zero_value_for_split_t_address()
                var__430 := zero_t_address_216
                /// @src 0:9901:9904  "set"
                let _217_slot := var_set_425_slot
                let expr_439_slot := _217_slot
                /// @src 0:9901:9911  "set._inner"
                let _218 := add(expr_439_slot, 0)
                let _219_slot := _218
                let expr_440_slot := _219_slot
                /// @src 0:9913:9918  "index"
                let _220 := var_index_427
                let expr_441 := _220
                /// @src 0:9897:9919  "_at(set._inner, index)"
                let _221_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_440_slot)
                let expr_442 := fun__at_186(_221_slot, expr_441)
                /// @src 0:9889:9920  "uint256(_at(set._inner, index))"
                let expr_443 := convert_t_bytes32_to_t_uint256(expr_442)
                /// @src 0:9881:9921  "uint160(uint256(_at(set._inner, index)))"
                let expr_444 := convert_t_uint256_to_t_uint160(expr_443)
                /// @src 0:9873:9922  "address(uint160(uint256(_at(set._inner, index))))"
                let expr_445 := convert_t_uint160_to_t_address(expr_444)
                /// @src 0:9866:9922  "return address(uint160(uint256(_at(set._inner, index))))"
                var__430 := expr_445
                leave
            }
            /// @ast-id 186 @src 0:5122:5240  "function _at(Set storage set, uint256 index) private view returns (bytes32) {..."
            function fun__at_186(var_set_173_slot, var_index_175) -> var__178
            {
                /// @src 0:5189:5196  "bytes32"
                let zero_t_bytes32_222 := zero_value_for_split_t_bytes32()
                var__178 := zero_t_bytes32_222
                /// @src 0:5215:5218  "set"
                let _223_slot := var_set_173_slot
                let expr_180_slot := _223_slot
                /// @src 0:5215:5226  "set._values"
                let _224 := add(expr_180_slot, 0)
                let _225_slot := _224
                let expr_181_slot := _225_slot
                /// @src 0:5227:5232  "index"
                let _226 := var_index_175
                let expr_182 := _226
                /// @src 0:5215:5233  "set._values[index]"
                let _227, _228 := storage_array_index_access_t_array$_t_bytes32_$dyn_storage(expr_181_slot, expr_182)
                let _229 := read_from_storage_split_dynamic_t_bytes32(_227, _228)
                let expr_183 := _229
                /// @src 0:5208:5233  "return set._values[index]"
                var__178 := expr_183
                leave
            }
            /// @ast-id 1977 @src 0:37424:37632  "function operators(address lister) public view returns (address[] memory list) {..."
            function fun_operators_1977(var_lister_1956) -> var_list_1960_mpos
            {
                /// @src 0:37480:37501  "address[] memory list"
                let zero_t_array$_t_address_$dyn_memory_ptr_230_mpos := zero_value_for_split_t_array$_t_address_$dyn_memory_ptr()
                var_list_1960_mpos := zero_t_array$_t_address_$dyn_memory_ptr_230_mpos
                /// @src 0:37534:37544  "_operators"
                let _231_slot := 0x00
                let expr_1967_slot := _231_slot
                /// @src 0:37545:37551  "lister"
                let _232 := var_lister_1956
                let expr_1968 := _232
                /// @src 0:37534:37552  "_operators[lister]"
                let _233 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_1967_slot, expr_1968)
                let _234_slot := _233
                let expr_1969_slot := _234_slot
                /// @src 0:37534:37559  "_operators[lister]._inner"
                let _235 := add(expr_1969_slot, 0)
                let _236_slot := _235
                let expr_1970_slot := _236_slot
                /// @src 0:37534:37565  "_operators[lister]._inner._keys"
                let _237 := add(expr_1970_slot, 0)
                let _238_slot := _237
                let expr_1971_slot := _238_slot
                /// @src 0:37534:37572  "_operators[lister]._inner._keys.values"
                let expr_1972_self_slot := convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(expr_1971_slot)
                /// @src 0:37534:37574  "_operators[lister]._inner._keys.values()"
                let expr_1973_mpos := fun_values_321(expr_1972_self_slot)
                /// @src 0:37513:37574  "bytes32[] memory a = _operators[lister]._inner._keys.values()"
                let var_a_1966_mpos := expr_1973_mpos
                /// @src 0:37584:37626  "assembly {..."
                {
                    var_list_1960_mpos := var_a_1966_mpos
                }
            }
            /// @ast-id 321 @src 0:7975:8275  "function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {..."
            function fun_values_321(var_set_295_slot) -> var__299_mpos
            {
                /// @src 0:8038:8054  "bytes32[] memory"
                let zero_t_array$_t_bytes32_$dyn_memory_ptr_239_mpos := zero_value_for_split_t_array$_t_bytes32_$dyn_memory_ptr()
                var__299_mpos := zero_t_array$_t_bytes32_$dyn_memory_ptr_239_mpos
                /// @src 0:8099:8102  "set"
                let _240_slot := var_set_295_slot
                let expr_307_slot := _240_slot
                /// @src 0:8099:8109  "set._inner"
                let _241 := add(expr_307_slot, 0)
                let _242_slot := _241
                let expr_308_slot := _242_slot
                /// @src 0:8091:8110  "_values(set._inner)"
                let _243_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_308_slot)
                let expr_309_mpos := fun__values_200(_243_slot)
                /// @src 0:8066:8110  "bytes32[] memory store = _values(set._inner)"
                let var_store_305_mpos := expr_309_mpos
                /// @src 0:8120:8143  "bytes32[] memory result"
                let var_result_315_mpos
                let zero_t_array$_t_bytes32_$dyn_memory_ptr_244_mpos := zero_value_for_split_t_array$_t_bytes32_$dyn_memory_ptr()
                var_result_315_mpos := zero_t_array$_t_bytes32_$dyn_memory_ptr_244_mpos
                /// @src 0:8197:8245  "assembly {..."
                {
                    var_result_315_mpos := var_store_305_mpos
                }
                /// @src 0:8262:8268  "result"
                let _245_mpos := var_result_315_mpos
                let expr_318_mpos := _245_mpos
                /// @src 0:8255:8268  "return result"
                var__299_mpos := expr_318_mpos
                leave
            }
            /// @ast-id 1994 @src 0:37852:37980  "function totalOperators(address lister) public view returns (uint256 total) {..."
            function fun_totalOperators_1994(var_lister_1980) -> var_total_1983
            {
                /// @src 0:37913:37926  "uint256 total"
                let zero_t_uint256_246 := zero_value_for_split_t_uint256()
                var_total_1983 := zero_t_uint256_246
                /// @src 0:37946:37956  "_operators"
                let _247_slot := 0x00
                let expr_1986_slot := _247_slot
                /// @src 0:37957:37963  "lister"
                let _248 := var_lister_1980
                let expr_1987 := _248
                /// @src 0:37946:37964  "_operators[lister]"
                let _249 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_1986_slot, expr_1987)
                let _250_slot := _249
                let expr_1988_slot := _250_slot
                /// @src 0:37946:37971  "_operators[lister].length"
                let expr_1989_self_slot := convert_t_struct$_AddressToUintMap_$1299_storage_to_t_struct$_AddressToUintMap_$1299_storage_ptr(expr_1988_slot)
                /// @src 0:37946:37973  "_operators[lister].length()"
                let expr_1990 := fun_length_1401(expr_1989_self_slot)
                /// @src 0:37938:37973  "total = _operators[lister].length()"
                var_total_1983 := expr_1990
                let expr_1991 := expr_1990
            }
            /// @ast-id 1401 @src 0:25524:25644  "function length(AddressToUintMap storage map) internal view returns (uint256) {..."
            function fun_length_1401(var_map_1390_slot) -> var__1393
            {
                /// @src 0:25593:25600  "uint256"
                let zero_t_uint256_251 := zero_value_for_split_t_uint256()
                var__1393 := zero_t_uint256_251
                /// @src 0:25626:25629  "map"
                let _252_slot := var_map_1390_slot
                let expr_1396_slot := _252_slot
                /// @src 0:25626:25636  "map._inner"
                let _253 := add(expr_1396_slot, 0)
                let _254_slot := _253
                let expr_1397_slot := _254_slot
                /// @src 0:25619:25637  "length(map._inner)"
                let _255_slot := convert_t_struct$_Bytes32ToBytes32Map_$625_storage_to_t_struct$_Bytes32ToBytes32Map_$625_storage_ptr(expr_1397_slot)
                let expr_1398 := fun_length_710(_255_slot)
                /// @src 0:25612:25637  "return length(map._inner)"
                var__1393 := expr_1398
                leave
            }
            /// @ast-id 710 @src 0:16290:16413  "function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {..."
            function fun_length_710(var_map_699_slot) -> var__702
            {
                /// @src 0:16362:16369  "uint256"
                let zero_t_uint256_256 := zero_value_for_split_t_uint256()
                var__702 := zero_t_uint256_256
                /// @src 0:16388:16391  "map"
                let _257_slot := var_map_699_slot
                let expr_704_slot := _257_slot
                /// @src 0:16388:16397  "map._keys"
                let _258 := add(expr_704_slot, 0)
                let _259_slot := _258
                let expr_705_slot := _259_slot
                /// @src 0:16388:16404  "map._keys.length"
                let expr_706_self_slot := convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(expr_705_slot)
                /// @src 0:16388:16406  "map._keys.length()"
                let expr_707 := fun_length_273(expr_706_self_slot)
                /// @src 0:16381:16406  "return map._keys.length()"
                var__702 := expr_707
                leave
            }
            /// @ast-id 273 @src 0:6849:6964  "function length(Bytes32Set storage set) internal view returns (uint256) {..."
            function fun_length_273(var_set_262_slot) -> var__265
            {
                /// @src 0:6912:6919  "uint256"
                let zero_t_uint256_260 := zero_value_for_split_t_uint256()
                var__265 := zero_t_uint256_260
                /// @src 0:6946:6949  "set"
                let _261_slot := var_set_262_slot
                let expr_268_slot := _261_slot
                /// @src 0:6946:6956  "set._inner"
                let _262 := add(expr_268_slot, 0)
                let _263_slot := _262
                let expr_269_slot := _263_slot
                /// @src 0:6938:6957  "_length(set._inner)"
                let _264_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_269_slot)
                let expr_270 := fun__length_169(_264_slot)
                /// @src 0:6931:6957  "return _length(set._inner)"
                var__265 := expr_270
                leave
            }
            /// @ast-id 2018 @src 0:38315:38515  "function operatorAt(address lister, uint256 index)..."
            function fun_operatorAt_2018(var_lister_1997, var_index_1999) -> var_operator_2002, var_begins_2004
            {
                /// @src 0:38411:38427  "address operator"
                let zero_t_address_265 := zero_value_for_split_t_address()
                var_operator_2002 := zero_t_address_265
                /// @src 0:38429:38443  "uint256 begins"
                let zero_t_uint256_266 := zero_value_for_split_t_uint256()
                var_begins_2004 := zero_t_uint256_266
                /// @src 0:38480:38490  "_operators"
                let _267_slot := 0x00
                let expr_2009_slot := _267_slot
                /// @src 0:38491:38497  "lister"
                let _268 := var_lister_1997
                let expr_2010 := _268
                /// @src 0:38480:38498  "_operators[lister]"
                let _269 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_2009_slot, expr_2010)
                let _270_slot := _269
                let expr_2011_slot := _270_slot
                /// @src 0:38480:38501  "_operators[lister].at"
                let expr_2012_self_slot := convert_t_struct$_AddressToUintMap_$1299_storage_to_t_struct$_AddressToUintMap_$1299_storage_ptr(expr_2011_slot)
                /// @src 0:38502:38507  "index"
                let _271 := var_index_1999
                let expr_2013 := _271
                /// @src 0:38480:38508  "_operators[lister].at(index)"
                let expr_2014_component_1, expr_2014_component_2 := fun_at_1441(expr_2012_self_slot, expr_2013)
                /// @src 0:38459:38508  "(operator, begins) = _operators[lister].at(index)"
                var_begins_2004 := expr_2014_component_2
                var_operator_2002 := expr_2014_component_1
            }
            /// @ast-id 1441 @src 0:25981:26213  "function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {..."
            function fun_at_1441(var_map_1405_slot, var_index_1407) -> var__1410, var__1412
            {
                /// @src 0:26061:26068  "address"
                let zero_t_address_272 := zero_value_for_split_t_address()
                var__1410 := zero_t_address_272
                /// @src 0:26070:26077  "uint256"
                let zero_t_uint256_273 := zero_value_for_split_t_uint256()
                var__1412 := zero_t_uint256_273
                /// @src 0:26123:26126  "map"
                let _274_slot := var_map_1405_slot
                let expr_1419_slot := _274_slot
                /// @src 0:26123:26133  "map._inner"
                let _275 := add(expr_1419_slot, 0)
                let _276_slot := _275
                let expr_1420_slot := _276_slot
                /// @src 0:26135:26140  "index"
                let _277 := var_index_1407
                let expr_1421 := _277
                /// @src 0:26120:26141  "at(map._inner, index)"
                let _278_slot := convert_t_struct$_Bytes32ToBytes32Map_$625_storage_to_t_struct$_Bytes32ToBytes32Map_$625_storage_ptr(expr_1420_slot)
                let expr_1422_component_1, expr_1422_component_2 := fun_at_739(_278_slot, expr_1421)
                /// @src 0:26089:26141  "(bytes32 key, bytes32 value) = at(map._inner, index)"
                let var_key_1415 := expr_1422_component_1
                let var_value_1417 := expr_1422_component_2
                /// @src 0:26183:26186  "key"
                let _279 := var_key_1415
                let expr_1430 := _279
                /// @src 0:26175:26187  "uint256(key)"
                let expr_1431 := convert_t_bytes32_to_t_uint256(expr_1430)
                /// @src 0:26167:26188  "uint160(uint256(key))"
                let expr_1432 := convert_t_uint256_to_t_uint160(expr_1431)
                /// @src 0:26159:26189  "address(uint160(uint256(key)))"
                let expr_1433 := convert_t_uint160_to_t_address(expr_1432)
                /// @src 0:26158:26206  "(address(uint160(uint256(key))), uint256(value))"
                let expr_1438_component_1 := expr_1433
                /// @src 0:26199:26204  "value"
                let _280 := var_value_1417
                let expr_1436 := _280
                /// @src 0:26191:26205  "uint256(value)"
                let expr_1437 := convert_t_bytes32_to_t_uint256(expr_1436)
                /// @src 0:26158:26206  "(address(uint160(uint256(key))), uint256(value))"
                let expr_1438_component_2 := expr_1437
                /// @src 0:26151:26206  "return (address(uint160(uint256(key))), uint256(value))"
                var__1410 := expr_1438_component_1
                var__1412 := expr_1438_component_2
                leave
            }
            /// @src 0:30883:40043  "contract PreApproveRegistry {..."
            function read_from_storage_split_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            /// @ast-id 739 @src 0:16766:16957  "function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {..."
            function fun_at_739(var_map_714_slot, var_index_716) -> var__719, var__721
            {
                /// @src 0:16849:16856  "bytes32"
                let zero_t_bytes32_281 := zero_value_for_split_t_bytes32()
                var__719 := zero_t_bytes32_281
                /// @src 0:16858:16865  "bytes32"
                let zero_t_bytes32_282 := zero_value_for_split_t_bytes32()
                var__721 := zero_t_bytes32_282
                /// @src 0:16891:16894  "map"
                let _283_slot := var_map_714_slot
                let expr_725_slot := _283_slot
                /// @src 0:16891:16900  "map._keys"
                let _284 := add(expr_725_slot, 0)
                let _285_slot := _284
                let expr_726_slot := _285_slot
                /// @src 0:16891:16903  "map._keys.at"
                let expr_727_self_slot := convert_t_struct$_Bytes32Set_$204_storage_to_t_struct$_Bytes32Set_$204_storage_ptr(expr_726_slot)
                /// @src 0:16904:16909  "index"
                let _286 := var_index_716
                let expr_728 := _286
                /// @src 0:16891:16910  "map._keys.at(index)"
                let expr_729 := fun_at_291(expr_727_self_slot, expr_728)
                /// @src 0:16877:16910  "bytes32 key = map._keys.at(index)"
                let var_key_724 := expr_729
                /// @src 0:16928:16931  "key"
                let _287 := var_key_724
                let expr_731 := _287
                /// @src 0:16927:16950  "(key, map._values[key])"
                let expr_736_component_1 := expr_731
                /// @src 0:16933:16936  "map"
                let _288_slot := var_map_714_slot
                let expr_732_slot := _288_slot
                /// @src 0:16933:16944  "map._values"
                let _289 := add(expr_732_slot, 2)
                let _290_slot := _289
                let expr_733_slot := _290_slot
                /// @src 0:16945:16948  "key"
                let _291 := var_key_724
                let expr_734 := _291
                /// @src 0:16933:16949  "map._values[key]"
                let _292 := mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(expr_733_slot, expr_734)
                let _293 := read_from_storage_split_offset_0_t_bytes32(_292)
                let expr_735 := _293
                /// @src 0:16927:16950  "(key, map._values[key])"
                let expr_736_component_2 := expr_735
                /// @src 0:16920:16950  "return (key, map._values[key])"
                var__719 := expr_736_component_1
                var__721 := expr_736_component_2
                leave
            }
            /// @ast-id 291 @src 0:7306:7435  "function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {..."
            function fun_at_291(var_set_277_slot, var_index_279) -> var__282
            {
                /// @src 0:7380:7387  "bytes32"
                let zero_t_bytes32_294 := zero_value_for_split_t_bytes32()
                var__282 := zero_t_bytes32_294
                /// @src 0:7410:7413  "set"
                let _295_slot := var_set_277_slot
                let expr_285_slot := _295_slot
                /// @src 0:7410:7420  "set._inner"
                let _296 := add(expr_285_slot, 0)
                let _297_slot := _296
                let expr_286_slot := _297_slot
                /// @src 0:7422:7427  "index"
                let _298 := var_index_279
                let expr_287 := _298
                /// @src 0:7406:7428  "_at(set._inner, index)"
                let _299_slot := convert_t_struct$_Set_$10_storage_to_t_struct$_Set_$10_storage_ptr(expr_286_slot)
                let expr_288 := fun__at_186(_299_slot, expr_287)
                /// @src 0:7399:7428  "return _at(set._inner, index)"
                var__282 := expr_288
                leave
            }
            /// @ast-id 2051 @src 0:38909:39104  "function startTime(address lister, address operator) public view returns (uint256 begins) {..."
            function fun_startTime_2051(var_lister_2021, var_operator_2023) -> var_begins_2026
            {
                /// @src 0:38983:38997  "uint256 begins"
                let zero_t_uint256_300 := zero_value_for_split_t_uint256()
                var_begins_2026 := zero_t_uint256_300
                /// @src 0:39026:39036  "_operators"
                let _301_slot := 0x00
                let expr_2031_slot := _301_slot
                /// @src 0:39037:39043  "lister"
                let _302 := var_lister_2021
                let expr_2032 := _302
                /// @src 0:39026:39044  "_operators[lister]"
                let _303 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_2031_slot, expr_2032)
                let _304_slot := _303
                let expr_2033_slot := _304_slot
                /// @src 0:39026:39051  "_operators[lister]._inner"
                let _305 := add(expr_2033_slot, 0)
                let _306_slot := _305
                let expr_2034_slot := _306_slot
                /// @src 0:39026:39059  "_operators[lister]._inner._values"
                let _307 := add(expr_2034_slot, 2)
                let _308_slot := _307
                let expr_2035_slot := _308_slot
                /// @src 0:39084:39092  "operator"
                let _309 := var_operator_2023
                let expr_2042 := _309
                /// @src 0:39076:39093  "uint160(operator)"
                let expr_2043 := convert_t_address_to_t_uint160(expr_2042)
                /// @src 0:39068:39094  "uint256(uint160(operator))"
                let expr_2044 := convert_t_uint160_to_t_uint256(expr_2043)
                /// @src 0:39060:39095  "bytes32(uint256(uint160(operator)))"
                let expr_2045 := convert_t_uint256_to_t_bytes32(expr_2044)
                /// @src 0:39026:39096  "_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))]"
                let _310 := mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(expr_2035_slot, expr_2045)
                let _311 := read_from_storage_split_offset_0_t_bytes32(_310)
                let expr_2046 := _311
                /// @src 0:39018:39097  "uint256(_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))])"
                let expr_2047 := convert_t_bytes32_to_t_uint256(expr_2046)
                /// @src 0:39009:39097  "begins = uint256(_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))])"
                var_begins_2026 := expr_2047
                let expr_2048 := expr_2047
            }
            /// @ast-id 2095 @src 0:39593:40041  "function isPreApproved(address operator, address collector, address lister)..."
            function fun_isPreApproved_2095(var_operator_2054, var_collector_2056, var_lister_2058) -> var_preApproved_2061
            {
                /// @src 0:39714:39730  "bool preApproved"
                let zero_t_bool_312 := zero_value_for_split_t_bool()
                var_preApproved_2061 := zero_t_bool_312
                /// @src 0:39750:39764  "_subscriptions"
                let _313_slot := 0x01
                let expr_2063_slot := _313_slot
                /// @src 0:39765:39774  "collector"
                let _314 := var_collector_2056
                let expr_2064 := _314
                /// @src 0:39750:39775  "_subscriptions[collector]"
                let _315 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressSet_$325_storage_$_of_t_address(expr_2063_slot, expr_2064)
                let _316_slot := _315
                let expr_2065_slot := _316_slot
                /// @src 0:39750:39784  "_subscriptions[collector].contains"
                let expr_2066_self_slot := convert_t_struct$_AddressSet_$325_storage_to_t_struct$_AddressSet_$325_storage_ptr(expr_2065_slot)
                /// @src 0:39785:39791  "lister"
                let _317 := var_lister_2058
                let expr_2067 := _317
                /// @src 0:39750:39792  "_subscriptions[collector].contains(lister)"
                let expr_2068 := fun_contains_406(expr_2066_self_slot, expr_2067)
                /// @src 0:39746:40035  "if (_subscriptions[collector].contains(lister)) {..."
                if expr_2068
                {
                    /// @src 0:39833:39843  "_operators"
                    let _318_slot := 0x00
                    let expr_2073_slot := _318_slot
                    /// @src 0:39844:39850  "lister"
                    let _319 := var_lister_2058
                    let expr_2074 := _319
                    /// @src 0:39833:39851  "_operators[lister]"
                    let _320 := mapping_index_access_t_mapping$_t_address_$_t_struct$_AddressToUintMap_$1299_storage_$_of_t_address(expr_2073_slot, expr_2074)
                    let _321_slot := _320
                    let expr_2075_slot := _321_slot
                    /// @src 0:39833:39858  "_operators[lister]._inner"
                    let _322 := add(expr_2075_slot, 0)
                    let _323_slot := _322
                    let expr_2076_slot := _323_slot
                    /// @src 0:39833:39866  "_operators[lister]._inner._values"
                    let _324 := add(expr_2076_slot, 2)
                    let _325_slot := _324
                    let expr_2077_slot := _325_slot
                    /// @src 0:39891:39899  "operator"
                    let _326 := var_operator_2054
                    let expr_2084 := _326
                    /// @src 0:39883:39900  "uint160(operator)"
                    let expr_2085 := convert_t_address_to_t_uint160(expr_2084)
                    /// @src 0:39875:39901  "uint256(uint160(operator))"
                    let expr_2086 := convert_t_uint160_to_t_uint256(expr_2085)
                    /// @src 0:39867:39902  "bytes32(uint256(uint160(operator)))"
                    let expr_2087 := convert_t_uint256_to_t_bytes32(expr_2086)
                    /// @src 0:39833:39903  "_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))]"
                    let _327 := mapping_index_access_t_mapping$_t_bytes32_$_t_bytes32_$_of_t_bytes32(expr_2077_slot, expr_2087)
                    let _328 := read_from_storage_split_offset_0_t_bytes32(_327)
                    let expr_2088 := _328
                    /// @src 0:39825:39904  "uint256(_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))])"
                    let expr_2089 := convert_t_bytes32_to_t_uint256(expr_2088)
                    /// @src 0:39808:39904  "uint256 begins = uint256(_operators[lister]._inner._values[bytes32(uint256(uint160(operator)))])"
                    let var_begins_2070 := expr_2089
                    /// @src 0:39918:40025  "assembly {..."
                    {
                        var_preApproved_2061 := iszero(or(iszero(var_begins_2070), lt(timestamp(), var_begins_2070)))
                    }
                }
            }
        }
        data ".metadata" hex"a2646970667358221220c752d162d4c107b8a721c62f14d6e88363ea29afa63cc76e6f8b3724b4d41cac64736f6c637829302e382e31382d646576656c6f702e323032322e31312e32392b636f6d6d69742e3730373061313732005a"
    }
}

